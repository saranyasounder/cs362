/**
 * Interface representing a data point with x and y coordinates
 */
// interface DataPoint {
//   x: number;
//   y: number;
// }

import type { DataPoint } from './types';

/**
 * Interface for the QuickChart request body
 */
interface QuickChartRequest {
  format: string;
  version: string;
  chart: {
    type: string;
    data: {
      datasets: Array<{
        data: DataPoint[];
      }>;
    };
    options: {
      datasets: {
        line?: {
          borderColor: string;
          borderWidth: number;
        };
        bar?: {
          backgroundColor: string;
        };
        scatter?: {
          borderColor: string;
          backgroundColor: string;
          borderWidth: number;
        };
      };
      scales: {
        x: {
          type: string | undefined;
          beginAtZero: boolean;
          title: {
            display: boolean;
            text: string;
          };
        };
        y: {
          type: string;
          beginAtZero: boolean;
          title: {
            display: boolean;
            text: string;
          };
        };
      };
      plugins: {
        legend: {
          display: boolean;
        };
        title?: {
          display: boolean;
          text: string;
        };
      };
    };
  };
}

// Helper function to convert Blob to base64
function blobToBase64(blob: Blob): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}

/**
 * This function makes an HTTP POST request to the QuickChart API to generate
 * a chart image. Once the chart image is generated and returned by the API,
 * a URL representing the image is returned (within a Promise) from this
 * function.
 *
 * More information on the QuickChart API can be found here:
 *
 *   https://quickchart.io/documentation/
 *
 * @param type A string indicating what kind of chart to draw. Must be one
 *   of "line", "scatter", or "bar".
 * @param data An array of x,y data points. Should have the following format:
 *   [
 *     { x: ..., y: ... },
 *     { x: ..., y: ... },
 *     { x: ..., y: ... },
 *     ...
 *   ]
 * @param xLabel A string specifying the label for the X axis of the chart.
 * @param yLabel A string specifying the label for the Y axis of the chart.
 * @param title An optional string specifying the title of the chart. If not
 *   specified, no title is drawn.
 * @param color An optional string specifying the color of the chart. This
 *   can be any valid CSS color string (e.g. a hex color or CSS keyword color).
 *
 * @return Returns a JS Promise that resolves to a URL representing the chart
 *   image generated by the QuickCharts API based on the specified parameters.
 */

export async function generateChart(
  type: "line" | "scatter" | "bar",
  data: DataPoint[],
  xLabel: string,
  yLabel: string,
  title?: string,
  color?: string
) {
  const requestBody = generateQuickChartRequest(
    type,
    data,
    xLabel,
    yLabel,
    title,
    color
  );

  try {
    const res = await fetch("https://quickchart.io/chart", {
      method: "POST",
      body: JSON.stringify(requestBody),
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (res.ok) {
      const blob = await res.blob();

      // For storage - convert to base64
      const base64data = await blobToBase64(blob);
      
      return {
        imageData: base64data
      };
    } else {
      const err = await res.text();
      throw new Error(err);
    }
  } catch (error) {
    console.error("Chart generation failed:", error);
    throw error;
  }
}

/**
 * This is a utility function that generates a properly formatted request body
 * for the QuickChart API. As you can see, the necessary request body is
 * fairly complex. More information on the QuickChart API can be found here:
 *
 *   https://quickchart.io/documentation/
 *
 * @param type A string indicating what kind of chart to draw. Must be one
 *   of "line", "scatter", or "bar".
 * @param data An array of x,y data points. Should have the following format:
 *   [
 *     { x: ..., y: ... },
 *     { x: ..., y: ... },
 *     { x: ..., y: ... },
 *     ...
 *   ]
 * @param xLabel A string specifying the label for the X axis of the chart.
 * @param yLabel A string specifying the label for the Y axis of the chart.
 * @param title An optional string specifying the title of the chart. If not
 *   specified, no title is drawn.
 * @param color An optional string specifying the color of the chart. This
 *   can be any valid CSS color string (e.g. a hex color or CSS keyword color).
 *
 * @return Returns an object that can be passed to JSON.stringify() to serve
 *   as a POST request body to the QuickChart API.
 */

/**
 * This is a utility function that generates a properly formatted request body
 * for the QuickChart API.
 */
function generateQuickChartRequest(
  type: "line" | "scatter" | "bar",
  data: DataPoint[],
  xLabel: string,
  yLabel: string,
  title?: string,
  color?: string
): QuickChartRequest {
  return {
    format: "png",
    version: "4",
    chart: {
      type: type,
      data: {
        datasets: [
          {
            data: data,
          },
        ],
      },
      options: {
        datasets: {
          line: type === "line" ? {
            borderColor: color || '#F97316', // Default to black if color is undefined
            borderWidth: 2,
          } : undefined,
          bar: type === "bar" ? {
            backgroundColor: color || '#F97316', // Default to black if color is undefined
          } : undefined,
          scatter: type === "scatter" ? {
            borderColor: color || '#F97316', // Default to black if color is undefined
            backgroundColor: color || '#F97316', // Default to black if color is undefined
            borderWidth: 1,
          } : undefined,
        },
        scales: {
          x: {
            type: type === "bar" ? undefined : "linear",
            beginAtZero: type === "scatter",
            title: {
              display: true,
              text: xLabel,
            },
          },
          y: {
            type: "linear",
            beginAtZero: true,
            title: {
              display: true,
              text: yLabel,
            },
          },
        },
        plugins: {
          legend: {
            display: false,
          },
          title: title ? {
            display: true,
            text: title,
          } : undefined,
        },
      },
    },
  };
}
